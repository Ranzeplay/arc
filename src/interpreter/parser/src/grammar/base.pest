DIGITS = { '0'..'9' }
LETTERS = { 'a'..'z' | 'A'..'Z' }

PLUS = { "+" }
MINUS = { "-" }
MULTIPLY = { "*" }
DIVIDE = { "/" }
MODULO = { "%" }
BITWISE_AND = { "&" }
BITWISE_OR = { "|" }
BITWISE_LSHIFT = { "<<" }
BITWISE_RSHIFT = { ">>" }
BITWISE_XOR = { "^" }
BITWISE_NOT = { "~" }
COMP_OBJ_EQ = { "==" }
COMP_REF_EQ = { "===" }
COMP_OBJ_NEQ = { "<>" }
COMP_REF_NEQ = { "<!>" }
COMP_LT = { "<" }
COMP_GT = { ">" }
COMP_LTE = { "<=" }
COMP_GTE = { ">=" }
LOGICAL_AND = { "&&" }
LOGICAL_OR = { "||" }
LOGICAL_NOT = { "!" }
ASSIGN = { "=" }
ASSIGN_IF_NULL = { "??=" }
SELF_INCREMENT = { "++" }
SELF_DECREMENT = { "--" }
INCREASE_BY = { "+=" }
DECREASE_BY = { "-=" }
MULTIPLY_BY = { "*=" }
DIVIDE_BY = { "/=" }
MOD_BY = { "%=" }

LPAREN = { "(" }
RPAREN = { ")" }
LBRACKET = { "[" }
RBRACKET = { "]" }
LBRACE = { "{" }
RBRACE = { "}" }
QUESTION = { "?" }
SEMICOLON = { ";" }
RANGE = { ".." }
AT = { "@" }
COMMA = { "," }
PIPE = { "|>" }
NULL_COALESCING = { "??" }
COLON = { ":" }
DOT = { "." }
ARROW = { "=>" }
OPTIONAL_CHAIN = { "?." }
SCOPE = { "::" }

KW_IF = { "if" }
KW_ELIF = { "elif" }
KW_ELSE = { "else" }
KW_WHILE = { "while" }
KW_FOR = { "for" }
KW_LOOP = { "loop" }
KW_FOREACH = { "foreach" }
KW_IN = { "in" }
KW_BREAK = { "break" }
KW_CONTINUE = { "continue" }
KW_RETURN = { "return" }
KW_THROW = { "throw" }
KW_TRY = { "try" }
KW_CATCH = { "catch" }
KW_FINALLY = { "finally" }
KW_MATCH = { "match" }
KW_CASE = { "case" }
KW_GET = { "get" }
KW_SET = { "set" }
KW_DEFAULT = { "default" }
KW_AWAIT = { "await" }
KW_ASYNC = { "async" }
KW_FUNCTION = { "func" }
KW_GROUP = { "group" }
KW_FIELD = { "field" }
KW_CONSTRUCTOR = { "constructor" }
KW_DESTRUCTOR = { "destructor" }
KW_OPERATOR = { "operator" }
KW_PUBLIC = { "public" }
KW_INTERNAL = { "internal" }
KW_PROTECTED = { "protected" }
KW_PRIVATE = { "private" }
KW_STATIC = { "static" }
KW_CONSTANT = { "const" }
KW_VARIABLE = { "var" }
KW_VALUE = { "val" }
KW_REFERENCE = { "ref" }
KW_CALL = { "call" }
KW_NEW = { "new" }
KW_DEFER = { "defer" }
KW_MACRO = { "macro" }
KW_NAMESPACE = { "namespace" }
KW_EXTENDS = { "extends" }
KW_IMPLEMENTS = { "implements" }
KW_LINK = { "link" }
KW_TRUE = { "true" }
KW_FALSE = { "false" }
KW_NONE = { "none" }
KW_ANY = { "any" }
KW_INFER = { "infer" }
KW_CHAR = { "char" }
KW_BOOL = { "bool" }
KW_INT = { "int" }
KW_DECIMAL = { "decimal" }
KW_STRING = { "string" }
KW_DISPOSE = { "dispose" }
KW_WITH = { "with" }
KW_LIFETIME = { "lifetime" }
KW_TYPEOF = { "typeof" }
KW_SELF = { "self" }

IDENTIFIER = @{ (LETTERS | "_") ~ (LETTERS | DIGITS | "_")* }

BOOLEAN = { KW_TRUE | KW_FALSE }

DECIMAL = @{ "-"? ~ DIGITS ~ ("." ~ DIGITS)? ~ (("e" | "E") ~ ("+" | "-")? ~ DIGITS)? }
OCTAL = @{ "0" ~ ("o" | "O") ~ DIGITS ~ ("_" ~ DIGITS)* }
HEXADECIMAL = @{ "0" ~ ("x" | "X") ~ DIGITS ~ ("_" ~ DIGITS)* }
BINARY = @{ "0" ~ ("b" | "B") ~ DIGITS ~ ("_" ~ DIGITS)* }

NUMERIC = { DECIMAL | OCTAL | HEXADECIMAL | BINARY }

STRING = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
CHAR = { "'" ~ (!"'" ~ ANY) ~ "'" }

TEXT = { STRING | CHAR }

COMMENT = @{ "//" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | "\n" | "\r" | NEWLINE }

ACCESSIBILITY = { KW_PUBLIC | KW_INTERNAL | KW_PROTECTED | KW_PRIVATE }
MUTABILITY = { KW_CONSTANT | KW_VARIABLE }
MEMORY_STORE_TYPE = { KW_VALUE | KW_REFERENCE }

NAMESPACE_IDENTIFIER = { IDENTIFIER ~ (SCOPE ~ IDENTIFIER)* }
NAMESPACE_DECLARATOR = { KW_NAMESPACE ~ NAMESPACE_IDENTIFIER }
NAMESPACE_LIMITER = { LBRACKET ~ NAMESPACE_IDENTIFIER ~ RBRACKET }

SINGLE_IDENTIFIER = { IDENTIFIER }
FULL_IDENTIFIER = { NAMESPACE_LIMITER ~ DOT ~ IDENTIFIER }
FLEXIBLE_IDENTIFIER = { SINGLE_IDENTIFIER | FULL_IDENTIFIER }

CALL_CHAIN = { SINGLE_IDENTIFIER ~ (DOT ~ SINGLE_IDENTIFIER)* }

PRIMITIVE_TYPE = { KW_INT | KW_DECIMAL | KW_CHAR | KW_STRING | KW_BOOL | KW_NONE | KW_ANY | KW_INFER }
ARRAY_INDICATOR = { LBRACKET ~ RBRACKET }
DATA_TYPE = { MEMORY_STORE_TYPE ~ (PRIMITIVE_TYPE | FLEXIBLE_IDENTIFIER) ~ ARRAY_INDICATOR? }

DATA_DECLARATOR = { MUTABILITY ~ SINGLE_IDENTIFIER ~ COLON ~ DATA_TYPE }

ARG_LIST = { DATA_DECLARATOR ~ (COMMA ~ DATA_DECLARATOR)* }
WRAPPED_ARG_LIST = { LPAREN ~ ARG_LIST ~ RPAREN }

PARAM_LIST = { EXPRESSION ~ (COMMA ~ EXPRESSION)* }
WRAPPED_PARAM_LIST = { LPAREN ~ PARAM_LIST ~ RPAREN }

ANNOTATION = { AT ~ SINGLE_IDENTIFIER ~ WRAPPED_PARAM_LIST? }

INSTANT_VALUE = { NUMERIC | TEXT | BOOLEAN | KW_NONE | KW_ANY }

BINARY_EXPRESSION = { DATA_VALUE ~ (PLUS | MINUS | MULTIPLY | DIVIDE | MODULO | BITWISE_AND | BITWISE_OR | BITWISE_LSHIFT | BITWISE_RSHIFT | BITWISE_XOR | COMP_OBJ_EQ | COMP_REF_EQ | COMP_OBJ_NEQ | COMP_REF_NEQ | COMP_LT | COMP_GT | COMP_LTE | COMP_GTE | LOGICAL_AND | LOGICAL_OR) ~ EXPRESSION }
UNARY_EXPRESSION = { (MINUS | BITWISE_NOT | LOGICAL_NOT | SELF_INCREMENT | SELF_DECREMENT) ~ EXPRESSION }
TERNARY_EXPRESSION = { WRAPPED_EXPRESSION ~ QUESTION ~ EXPRESSION ~ COLON ~ EXPRESSION }

EXPRESSION = { BINARY_EXPRESSION | UNARY_EXPRESSION | TERNARY_EXPRESSION | DATA_VALUE | WRAPPED_ARG_LIST | CALL_CHAIN | WRAPPED_EXPRESSION }

WRAPPED_EXPRESSION = { LPAREN ~ EXPRESSION ~ RPAREN }

FUNCTION_DECLARATOR = { ANNOTATION* ~ ACCESSIBILITY ~ KW_FUNCTION ~ SINGLE_IDENTIFIER ~ WRAPPED_ARG_LIST ~ COLON ~ DATA_TYPE }
FUNCTION_CALL_BASE = { FLEXIBLE_IDENTIFIER ~ WRAPPED_PARAM_LIST }

PROCEDURE = { LBRACE ~ STATEMENT* ~ RBRACE }

FUNCTION_BLOCK = { FUNCTION_DECLARATOR ~ PROCEDURE }

TYPE_VALUE = { KW_TYPEOF ~ LPAREN ~ (EXPRESSION | DATA_TYPE) ~ RPAREN }
DATA_VALUE = { INSTANT_VALUE | FUNCTION_CALL_BASE | FLEXIBLE_IDENTIFIER }

STMT_LINK = { KW_LINK ~ NAMESPACE_IDENTIFIER ~ SEMICOLON }

STMT_RETURN = { KW_RETURN ~ EXPRESSION? ~ SEMICOLON }
STMT_BREAK = { KW_BREAK ~ SEMICOLON }
STMT_CONTINUE = { KW_CONTINUE ~ SEMICOLON }
STMT_DECLARATION = { DATA_DECLARATOR ~ SEMICOLON }
STMT_ASSIGNMENT = { FLEXIBLE_IDENTIFIER ~ (ASSIGN | ASSIGN_IF_NULL) ~ EXPRESSION ~ SEMICOLON }
STMT_CALL = { KW_CALL ~ FUNCTION_CALL_BASE ~ SEMICOLON }
STMT_DEFER = { KW_DEFER ~ FLEXIBLE_IDENTIFIER }
STMT_EXPRESSION = { TERNARY_EXPRESSION ~ SEMICOLON }
STMT_LOOP = { KW_LOOP ~ PROCEDURE }
STMT_FOREACH = { KW_FOREACH ~ LPAREN ~ DATA_DECLARATOR ~ KW_IN ~ EXPRESSION ~ RPAREN ~ PROCEDURE }
STMT_IF = { KW_IF ~ WRAPPED_EXPRESSION ~ PROCEDURE ~ (KW_ELIF ~ WRAPPED_EXPRESSION ~ PROCEDURE)* ~ (KW_ELSE ~ PROCEDURE)? }

STATEMENT = { STMT_RETURN | STMT_BREAK | STMT_CONTINUE | STMT_DECLARATION | STMT_ASSIGNMENT | STMT_CALL | STMT_DEFER | STMT_EXPRESSION | STMT_LOOP | STMT_FOREACH | STMT_IF }

SOURCE_FILE = { SOI ~ WHITESPACE* ~ (NAMESPACE_DECLARATOR | DATA_DECLARATOR | EXPRESSION)* ~ EOI }
