use std::collections::HashMap;

#[derive(Debug, PartialEq, Eq, Hash)]
pub enum Keyword {
    If,
    Elif,
    Else,
    While,
    For,
    Loop,
    Foreach,
    In,
    Break,
    Continue,
    Return,
    Throw,
    Try,
    Catch,
    Finally,
    Match,
    Case,
    Get,
    Set,
    Default,
    Await,
    Async,
    Function,
    Group,
    Field,
    Constructor,
    Destructor,
    Operator,
    Public,
    Internal,
    Protected,
    Private,
    Static,
    Constant,
    Variable,
    Value,
    Reference,
    Call,
    New,
    Defer,
    Macro,
    Namespace,
    Extends,
    Implements,
    Link,
    True,
    False,
    None,
    Any,
    Infer,
    Char,
    Bool,
    Int,
    Decimal,
    String,
    Dispose,
    With,
    Lifetime,
    Typeof,
    SelfValue,
}

pub fn get_keyword_map() -> HashMap<&'static str, Keyword> {
    use Keyword::*;
    let keywords = [
        ("if", If),
        ("elif", Elif),
        ("else", Else),
        ("while", While),
        ("for", For),
        ("loop", Loop),
        ("foreach", Foreach),
        ("in", In),
        ("break", Break),
        ("continue", Continue),
        ("return", Return),
        ("throw", Throw),
        ("try", Try),
        ("catch", Catch),
        ("finally", Finally),
        ("match", Match),
        ("case", Case),
        ("get", Get),
        ("set", Set),
        ("default", Default),
        ("await", Await),
        ("async", Async),
        ("func", Function),
        ("group", Group),
        ("field", Field),
        ("constructor", Constructor),
        ("destructor", Destructor),
        ("operator", Operator),
        ("public", Public),
        ("internal", Internal),
        ("protected", Protected),
        ("private", Private),
        ("static", Static),
        ("const", Constant),
        ("var", Variable),
        ("val", Value),
        ("ref", Reference),
        ("call", Call),
        ("new", New),
        ("defer", Defer),
        ("macro", Macro),
        ("namespace", Namespace),
        ("extends", Extends),
        ("implements", Implements),
        ("link", Link),
        ("true", True),
        ("false", False),
        ("none", None),
        ("any", Any),
        ("infer", Infer),
        ("char", Char),
        ("bool", Bool),
        ("int", Int),
        ("decimal", Decimal),
        ("string", String),
        ("dispose", Dispose),
        ("with", With),
        ("lifetime", Lifetime),
        ("typeof", Typeof),
        ("self", SelfValue),
    ];
    keywords.iter().cloned().collect()
}
