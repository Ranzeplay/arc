using Arc.Compiler.PackageGenerator.Generators.Instructions;
using Arc.Compiler.PackageGenerator.Helpers;
using Arc.Compiler.PackageGenerator.Models;
using Arc.Compiler.PackageGenerator.Models.Builtin;
using Arc.Compiler.PackageGenerator.Models.Builtin.Stdlib;
using Arc.Compiler.PackageGenerator.Models.Descriptors;
using Arc.Compiler.PackageGenerator.Models.Descriptors.Group;
using Arc.Compiler.PackageGenerator.Models.Generation;
using Arc.Compiler.PackageGenerator.Models.Intermediate;
using Arc.Compiler.PackageGenerator.Models.Scope;
using Arc.Compiler.SyntaxAnalyzer.Models;
using Arc.Compiler.SyntaxAnalyzer.Models.Components;

namespace Arc.Compiler.PackageGenerator.Generators
{
    internal class ArcLayeredScopeTreeGenerator
    {
        public static ArcScopeTree GeneratePrimitiveGroups(ArcCompilationUnit unit)
        {
            var tree = new ArcScopeTree();
            var current = tree.Root;
            var ns = GenerateUnitNamespace(unit, ref current);

            var nsSignature = current.Signature;
            foreach (var group in ns.Groups)
            {
                var descriptor = new ArcGroupDescriptor { Name = nsSignature + "+" + group.GetSignature(), ShortName = group.Identifier.Name };

                var complexTypeDescriptor = new ArcComplexType(descriptor) { Name = descriptor.Name };
                var typeNode = new ArcScopeTreeDataTypeNode(complexTypeDescriptor, group.Identifier.Name);
                current.AddChild(typeNode);

                var annotationDescriptor = new ArcAnnotationDescriptor()
                {
                    Name = descriptor.Name,
                    TargetGroup = descriptor,
                };
                var annotationNode = new ArcScopeTreeAnnotationNode(annotationDescriptor);
                current.AddChild(annotationNode);

                var node = new ArcScopeTreeGroupNode(descriptor) { SyntaxTree = group };
                current.AddChild(node);
            }

            return tree;
        }

        private static ArcNamespaceBlock GenerateUnitNamespace(ArcCompilationUnit unit, ref ArcScopeTreeNodeBase current)
        {
            // Split namespace
            var ns = unit.Namespace;
            foreach (var part in ns.Identifier.Namespace ?? [])
            {
                var namespaceScope = new ArcScopeTreeNamespaceNode(part);
                current = current.AddChild(namespaceScope);
            }

            return ns;
        }

        public static ArcScopeTree GenerateIndividualFunctions(ArcGenerationSource source, ArcScopeTree mainTree, ArcCompilationUnit unit)
        {
            var namespaceNode = mainTree.GetNamespace(unit.Namespace.Identifier.Namespace);
            foreach (var fn in unit.Namespace.Functions)
            {
                var descriptor = ArcFunctionGenerator.GenerateDescriptor(source, fn.Declarator);
                source.ParentSignature.Locators = source.ParentSignature.Locators
                    .Take(source.ParentSignature.Locators.Count - 1).ToList();
                var node = new ArcScopeTreeIndividualFunctionNode(descriptor) { SyntaxTree = fn };
                namespaceNode.AddChild(node);
            }

            return mainTree;
        }

        public static IEnumerable<ArcCompilationUnitStructure> GenerateUnitStructure(IEnumerable<ArcCompilationUnit> units)
        {
            var unitList = units.ToList();

            var logger = unitList.First().Logger;

            var globalScopeTree = new ArcScopeTree();

            globalScopeTree.MergeRoot(ArcStdlib.GetTree());
            globalScopeTree.MergeRoot(ArcPersistentData.BaseTypeScopeTree);

            var unitStructures = unitList.Select(u => new ArcCompilationUnitStructure(new ArcScopeTree(), u)).ToList();
            // Merge the scope tree generated by each compilation unit to the global scope tree
            unitStructures.ForEach(us =>
            {
                us.ScopeTree.MergeRoot(GeneratePrimitiveGroups(us.CompilationUnit));
                globalScopeTree.MergeRoot(us.ScopeTree);
            });

            // Link the namespaces linked by each compilation unit for filtering symbols
            unitStructures.ForEach(us =>
            {
                us.LinkedNamespaces.Add(globalScopeTree.GetNamespace(["Arc", "Base"])!);

                us.LinkedNamespaces.AddRange(
                    us.CompilationUnit
                        .LinkedSymbols
                        .Select(ls => ls.Identifier.Namespace)
                        .Select(globalScopeTree.GetNamespace)
                );

                // Also link the current namespace
                us.LinkedNamespaces.Add(us.GetCurrentNamespace);
            });

            // Generate the group structure for each group node
            unitStructures.ForEach(us =>
            {
                us.ScopeTree.FlattenedNodes.OfType<ArcScopeTreeGroupNode>()
                    .ToList()
                    .ForEach(n =>
                    {
                        var context = new ArcGeneratorContext { Logger = logger, GlobalScopeTree = globalScopeTree };
                        var source = context.GenerateSource([us.CompilationUnit.Namespace], n);
                        source.LinkedNamespaces = us.LinkedNamespaces;
                        n.Descriptor.Annotations = [.. n.SyntaxTree.Annotations
                            .Select(a => ArcAnnotationHelper.FindAnnotationNode(source, a).Descriptor)
                            ];
                        n.ExpandSubDescriptors(source);
                    });
            });

            // Generate individual functions for each indivudal function node in the compilation unit
            unitStructures.ForEach(us =>
            {
                var context = new ArcGeneratorContext { Logger = logger, GlobalScopeTree = us.ScopeTree };
                var source = context.GenerateSource([us.CompilationUnit.Namespace], us.GetCurrentNamespace);
                source.LinkedNamespaces = us.LinkedNamespaces;
                var individualFunctionTree = GenerateIndividualFunctions(source, us.ScopeTree, us.CompilationUnit);
                us.ScopeTree.MergeRoot(individualFunctionTree, true);
            });

            return unitStructures;
        }
    }
}